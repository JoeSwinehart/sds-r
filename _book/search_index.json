[["feature-engineering.html", "3 Feature Engineering", " 3 Feature Engineering Feature engineering is a fancy machine learning way of saying “prepare your data for analysis”. But it’s also more than just getting your data in the right format. It’s about transforming variables to help the model provide more stable predictions; encoding, modeling, or omitting missing data; creating new variables from the available dataset; and otherwise helping improve the model performance through transformations and modifcations to the existing data before analysis. One of the biggest challenges with feature engineering is what’s referred to as data leakage, which is when information from the test dataset leaks into the training dataset. Consider the simple example of normalizing or standardizing a variable (subtracting the variable mean from each value and then dividing by the standard deviation). Normalizing your variables is neccesary for a wide range of predictive models, including any models using regularization methods, principal components analysis, and \\(k\\)-nearest neighbor models, among others. But when we normalize the variable, it is critical we do so relative to the training set, not relative to the full dataset. If we normalize the numeric variables in our dataset, then divide it into test and training datasets, then information from the test dataset has leaked into the training dataset. This seems simple enough - just wait to standardize until after splitting - but it becomes more complicated when we consider tuning a model. If we use a process like \\(k\\)-fold cross-validation, then we have to normalize within each fold to get an accurate representation of out-of-sample predictive accuracy. In this chapter, we’ll introduce feature engineering using the {recipes} package from the {tidymodels} suite of packages which, as we will see, helps you to be explicit about the decisions you’re making, while avoiding potential issues with data leakage. "],["basics-of-recipes.html", "3.1 Basics of {recipes}", " 3.1 Basics of {recipes} The recipes package is designed to replace the stats::model.matrix function that you’re probably familiar with. For example, if you fit a model like the below library(palmerpenguins) m1 &lt;- lm(bill_length_mm ~ species, data = penguins) summary(m1) ## ## Call: ## lm(formula = bill_length_mm ~ species, data = penguins) ## ## Residuals: ## Min 1Q Median 3Q Max ## -7.9338 -2.2049 0.0086 2.0662 12.0951 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 38.7914 0.2409 161.05 &lt;2e-16 *** ## speciesChinstrap 10.0424 0.4323 23.23 &lt;2e-16 *** ## speciesGentoo 8.7135 0.3595 24.24 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 2.96 on 339 degrees of freedom ## (2 observations deleted due to missingness) ## Multiple R-squared: 0.7078, Adjusted R-squared: 0.7061 ## F-statistic: 410.6 on 2 and 339 DF, p-value: &lt; 2.2e-16 You can see that our species column, which has the values Adelie, Gentoo, Chinstrap, is automatically dummy-coded for us, with the first level in the factor variable set as the reference group. The {recipes} package forces you to be a bit more explicit in these decisions. But it also has a much wider range of modifications it can make to the data. Another piece that is slightly different is that, in the above, you may not have even realized stats::model.matrix was doing anything for you because it’s wrapped within the stats::lm modeling code. But with {recipes}, you make the modifications to your data first, then conduct your analysis. The {recipes} package allows you to create a blueprint (or recipe) to apply to a given dataset, without actually applying those operations. We can then use this blueprint iteratively across sets of data (e.g., folds) as well as on new (potentially unseen) data that has the same structure (variables). This process helps avoid data leakage because all operations are carried forward and applied together, and no operations are conducted until explicitly requested. "],["creating-a-recipe.html", "3.2 Creating a recipe", " 3.2 Creating a recipe Let’s read in some data and begin creating a basic recipe. We’ll work with the simulated statewide testing data introduced previously. This is a fairly decent sized dataset, and since we’re just illustrating concepts here, we’ll pull a random sample of 2% of the total data to make everything run a bit quicker. We’ll also remove the classification variable, which is just a categorical version of score, our outcome. In the chunk below, we read in the data, sample a random 2% of the data (being careful to set a seed first so our results are reproducible), split it into training and test sets, and extract just the training dataset. We’ll hold off on splitting it into CV folds for now. library(tidyverse) library(tidymodels) set.seed(8675309) full_train &lt;- read_csv(&quot;https://github.com/uo-datasci-specialization/c4-ml-fall-2020/raw/master/data/train.csv&quot;) %&gt;% slice_sample(prop = 0.02) %&gt;% select(-classification) splt &lt;- initial_split(full_train) train &lt;- training(splt) A quick reminder, the data look like this And you can see the full data dictionary on the Kaggle website here. When creating recipes, we can still use the formula interface to define how the data will be modeled. In this case, we’ll say that the score column is predicted by everything else in the data frame. rec &lt;- recipe(score ~ ., data = train) Notice that I still declare the dataset, even though this is just a blueprint. It uses the dataset I provide to get the names of the columns from the dataset, but it doesn’t actually do anything with this dataset (unless we ask it to). Let’s look at what this recipe looks like rec ## Data Recipe ## ## Inputs: ## ## role #variables ## outcome 1 ## predictor 38 Notice it just states that this is a data recipe in which we have specified 1 outcome variable and 39 predictors. We can prep this recipe to learn more prep(rec) ## Data Recipe ## ## Inputs: ## ## role #variables ## outcome 1 ## predictor 38 ## ## Training data contained 2841 data points and 2841 incomplete rows. Notice we now get an additional message about how many rows are in the data, and how many of these rows contain missing (incomplete data). So the recipe is the blueprint, and we prep the recipe to get it to actually go into the data and conduct the operations. The dataset it has now, however, is just a placeholder than can be substituted in for any other dataset with an equivalent structure. But of course modeling score as the outcome with everything else predicting it (as is) is not reasonable for multiple reasons. We have many ID variables, for one, and we also multipe categorical variables. For some methods (like tree-based models) it might be okay to leave these as is, but for others (like any model in the linear regression family) we’ll wan to encode them somehow (e.g., dummy code). We can do these operations by adding steps to our recipe. In the first step, we’ll update the role of all the ID variables so they are not included among the predictors. In the second, we will dummy code all nominal variables. rec &lt;- recipe(score ~ ., train) %&gt;% update_role(contains(&quot;id&quot;), ncessch, new_role = &quot;id vars&quot;) %&gt;% step_dummy(all_nominal()) When updating the roles, we can change the variable label (text passed to the new_role argument) to be anything we want, so long as it’s not \"predictor\" or \"outcome\". Notice in the above I am also using helper functions to apply the operations to all variables of a specific type. There are five main helper functions: all_predictors(), all_outcomes(), all_nominal(), all_numeric() and has_role(). You can use these together, including with negation (e.g., -all_outcomes to specify the operation should not apply to the outcome variable(s)) to select any set of variables you want to apply the operation to. Let’s try prepping this recipe prep(rec) ## Error: Only one factor level in lang_cd Uh oh! We have an error. Our recipe is trying to dummy code the lang_cd variable, but it has only one level. It’s kind of hard to dummy-code a constant! Luckily, we can expand our recipe to first remove any zero-variance predictors, like so rec &lt;- recipe(score ~ ., train) %&gt;% update_role(contains(&quot;id&quot;), ncessch, new_role = &quot;id vars&quot;) %&gt;% step_zv(all_predictors()) %&gt;% step_dummy(all_nominal()) The zv part stands for “zero variance” and should take care of this problem. Let’s try again. prep(rec) ## Data Recipe ## ## Inputs: ## ## role #variables ## id vars 6 ## outcome 1 ## predictor 32 ## ## Training data contained 2841 data points and 2841 incomplete rows. ## ## Operations: ## ## Zero variance filter removed calc_admn_cd, lang_cd [trained] ## Dummy variables from gndr, ethnic_cd, tst_bnch, tst_dt, ... [trained] Beautiful! Note we do still get a warning here, but I’ve omitted it in the text (we’ll take care of it later). Our recipe says we now have 6 ID variables, 1 outcome, and 33 predictors, with 2841 data points (rows of data). The calc_admn_cd and lang_cd variables have been removed because they have zero variance, and several variables have been dummy coded, including gndr and ethnic_cd, among others. Let’s dig just a bit deeper here though. What’s going on with these zero-variance variables? Let’s look back at the training data. train %&gt;% count(calc_admn_cd) ## # A tibble: 1 x 2 ## calc_admn_cd n ## &lt;lgl&gt; &lt;int&gt; ## 1 NA 2841 train %&gt;% count(lang_cd) ## # A tibble: 2 x 2 ## lang_cd n ## &lt;chr&gt; &lt;int&gt; ## 1 S 80 ## 2 &lt;NA&gt; 2761 So at least in our sample, calc_admn_cd really is just fully missing, which means it might as well be dropped because it’s providing us exactly nothing. But that’s not the case with lang_cd. It has two values, NA and S. This variable represents the language the test was administered in and the NA values are actually meaningful here because they are the the “default” administration, meaning English. So rather than dropping these, let’s mutate them to transform the NA values to \"E\" for English. We could reasonably do this inside or outside the recipe, but a good rule of thumb is, if it can go in the recipe, put it in the recipe. It can’t hurt, and doing operations outside of the recipe risks data leakage. rec &lt;- recipe(score ~ ., train) %&gt;% update_role(contains(&quot;id&quot;), ncessch, new_role = &quot;id vars&quot;) %&gt;% step_mutate(lang_cd = ifelse(is.na(lang_cd), &quot;E&quot;, lang_cd)) %&gt;% step_zv(all_predictors()) %&gt;% step_dummy(all_nominal()) Let’s take a look at what our data would actually look like when applying this recipe now. First, we’ll prep the recipe prepped &lt;- prep(rec) prepped ## Data Recipe ## ## Inputs: ## ## role #variables ## id vars 6 ## outcome 1 ## predictor 32 ## ## Training data contained 2841 data points and 2841 incomplete rows. ## ## Operations: ## ## Variable mutation for lang_cd [trained] ## Zero variance filter removed calc_admn_cd [trained] ## Dummy variables from gndr, ethnic_cd, tst_bnch, tst_dt, ... [trained] And we see that lang_cd is no longer being caught by the zero variance filter. Next we’ll bake the recipe to actually apply it to our data. If we specify new_data = NULL, bake will apply the operation to the data we specified in the recipe. But we can also pass new data as an additional argument and it will apply the operations to that data instead of the data specified in the recipe. bake(prepped, new_data = NULL) ## # A tibble: 2,841 x 106 ## id attnd_dist_inst_id attnd_schl_inst_id enrl_grd partic_dist_inst_id ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 62576 2083 1353 7 2083 ## 2 71424 2180 878 6 2180 ## 3 179893 2244 1334 3 2244 ## 4 136083 2142 4858 5 2142 ## 5 196809 2212 1068 3 2212 ## 6 13931 2088 581 8 2088 ## 7 103344 1926 102 6 1926 ## 8 105122 2142 766 6 2142 ## 9 172543 1965 197 4 1965 ## 10 45153 2083 542 6 2083 ## # … with 2,831 more rows, and 101 more variables: partic_schl_inst_id &lt;dbl&gt;, ## # lang_cd &lt;fct&gt;, ncessch &lt;dbl&gt;, lat &lt;dbl&gt;, lon &lt;dbl&gt;, score &lt;dbl&gt;, ## # gndr_M &lt;dbl&gt;, ethnic_cd_B &lt;dbl&gt;, ethnic_cd_H &lt;dbl&gt;, ethnic_cd_I &lt;dbl&gt;, ## # ethnic_cd_M &lt;dbl&gt;, ethnic_cd_P &lt;dbl&gt;, ethnic_cd_W &lt;dbl&gt;, ## # tst_bnch_X2B &lt;dbl&gt;, tst_bnch_X3B &lt;dbl&gt;, tst_bnch_G4 &lt;dbl&gt;, ## # tst_bnch_G6 &lt;dbl&gt;, tst_bnch_G7 &lt;dbl&gt;, tst_dt_X3.21.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X3.22.2018.0.00.00 &lt;dbl&gt;, tst_dt_X3.23.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X3.8.2018.0.00.00 &lt;dbl&gt;, tst_dt_X3.9.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X4.10.2018.0.00.00 &lt;dbl&gt;, tst_dt_X4.11.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X4.12.2018.0.00.00 &lt;dbl&gt;, tst_dt_X4.13.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X4.16.2018.0.00.00 &lt;dbl&gt;, tst_dt_X4.17.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X4.18.2018.0.00.00 &lt;dbl&gt;, tst_dt_X4.19.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X4.2.2018.0.00.00 &lt;dbl&gt;, tst_dt_X4.20.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X4.23.2018.0.00.00 &lt;dbl&gt;, tst_dt_X4.24.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X4.25.2018.0.00.00 &lt;dbl&gt;, tst_dt_X4.26.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X4.27.2018.0.00.00 &lt;dbl&gt;, tst_dt_X4.30.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X4.5.2018.0.00.00 &lt;dbl&gt;, tst_dt_X4.6.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X4.9.2018.0.00.00 &lt;dbl&gt;, tst_dt_X5.1.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X5.10.2018.0.00.00 &lt;dbl&gt;, tst_dt_X5.11.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X5.14.2018.0.00.00 &lt;dbl&gt;, tst_dt_X5.15.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X5.16.2018.0.00.00 &lt;dbl&gt;, tst_dt_X5.17.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X5.18.2018.0.00.00 &lt;dbl&gt;, tst_dt_X5.2.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X5.21.2018.0.00.00 &lt;dbl&gt;, tst_dt_X5.22.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X5.23.2018.0.00.00 &lt;dbl&gt;, tst_dt_X5.24.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X5.25.2018.0.00.00 &lt;dbl&gt;, tst_dt_X5.29.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X5.3.2018.0.00.00 &lt;dbl&gt;, tst_dt_X5.30.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X5.31.2018.0.00.00 &lt;dbl&gt;, tst_dt_X5.4.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X5.7.2018.0.00.00 &lt;dbl&gt;, tst_dt_X5.8.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X5.9.2018.0.00.00 &lt;dbl&gt;, tst_dt_X6.1.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X6.4.2018.0.00.00 &lt;dbl&gt;, tst_dt_X6.5.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X6.6.2018.0.00.00 &lt;dbl&gt;, tst_dt_X6.7.2018.0.00.00 &lt;dbl&gt;, ## # tst_dt_X6.8.2018.0.00.00 &lt;dbl&gt;, migrant_ed_fg_Y &lt;dbl&gt;, ind_ed_fg_Y &lt;dbl&gt;, ## # sp_ed_fg_Y &lt;dbl&gt;, tag_ed_fg_Y &lt;dbl&gt;, econ_dsvntg_Y &lt;dbl&gt;, ayp_lep_B &lt;dbl&gt;, ## # ayp_lep_E &lt;dbl&gt;, ayp_lep_F &lt;dbl&gt;, ayp_lep_M &lt;dbl&gt;, ayp_lep_N &lt;dbl&gt;, ## # ayp_lep_S &lt;dbl&gt;, ayp_lep_W &lt;dbl&gt;, ayp_lep_X &lt;dbl&gt;, ayp_lep_Y &lt;dbl&gt;, ## # stay_in_dist_Y &lt;dbl&gt;, stay_in_schl_Y &lt;dbl&gt;, dist_sped_Y &lt;dbl&gt;, ## # trgt_assist_fg_Y &lt;dbl&gt;, ayp_dist_partic_Y &lt;dbl&gt;, ayp_schl_partic_Y &lt;dbl&gt;, ## # ayp_dist_prfrm_Y &lt;dbl&gt;, ayp_schl_prfrm_Y &lt;dbl&gt;, rc_dist_partic_Y &lt;dbl&gt;, ## # rc_schl_partic_Y &lt;dbl&gt;, rc_dist_prfrm_Y &lt;dbl&gt;, rc_schl_prfrm_Y &lt;dbl&gt;, ## # tst_atmpt_fg_Y &lt;dbl&gt;, grp_rpt_dist_partic_Y &lt;dbl&gt;, ## # grp_rpt_schl_partic_Y &lt;dbl&gt;, grp_rpt_dist_prfrm_Y &lt;dbl&gt;, … And now we can actually see the dummy-coded categorical variables, along with the other operations we requested. For example, calc_admn_cd is not in the dataset. Notice the ID variables are output though, which makes sense because they are often neccessary for joining with other data sources. But it’s important to realize that they are output (i.e., all variables are returned, regardless of role) because if we passed this directly to a model they would be included as predictors. Note that there may be reasons you would want to include a school and/or district level ID variable in your modeling, but you certainly would not want redundant variables. We do still have one minor issue with this recipe though, which is pretty evident when looking at the column names of our baked dataset. The tst_dt variable, which specifies the data the test was taken, was treated as a categorical variable because it read in as a character vector. That means all the dates are being dummy coded! Let’s fix this by just transforming it to a date within our step_mutate. rec &lt;- recipe(score ~ ., train) %&gt;% update_role(contains(&quot;id&quot;), ncessch, new_role = &quot;id vars&quot;) %&gt;% step_mutate(lang_cd = factor(ifelse(is.na(lang_cd), &quot;E&quot;, lang_cd)), tst_dt = lubridate::mdy_hms(tst_dt)) %&gt;% step_zv(all_predictors()) %&gt;% step_dummy(all_nominal()) And now when we prep/bake the dataset it’s still a date variable, which is what we probably want (it will modeled as a numeric variable). rec %&gt;% prep() %&gt;% bake(new_data = NULL) ## # A tibble: 2,841 x 55 ## id attnd_dist_inst_id attnd_schl_inst_id enrl_grd tst_dt ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dttm&gt; ## 1 62576 2083 1353 7 2018-05-16 00:00:00 ## 2 71424 2180 878 6 2018-04-24 00:00:00 ## 3 179893 2244 1334 3 2018-05-25 00:00:00 ## 4 136083 2142 4858 5 2018-05-24 00:00:00 ## 5 196809 2212 1068 3 2018-05-16 00:00:00 ## 6 13931 2088 581 8 2018-06-06 00:00:00 ## 7 103344 1926 102 6 2018-06-04 00:00:00 ## 8 105122 2142 766 6 2018-05-08 00:00:00 ## 9 172543 1965 197 4 2018-05-23 00:00:00 ## 10 45153 2083 542 6 2018-05-10 00:00:00 ## # … with 2,831 more rows, and 50 more variables: partic_dist_inst_id &lt;dbl&gt;, ## # partic_schl_inst_id &lt;dbl&gt;, ncessch &lt;dbl&gt;, lat &lt;dbl&gt;, lon &lt;dbl&gt;, ## # score &lt;dbl&gt;, gndr_M &lt;dbl&gt;, ethnic_cd_B &lt;dbl&gt;, ethnic_cd_H &lt;dbl&gt;, ## # ethnic_cd_I &lt;dbl&gt;, ethnic_cd_M &lt;dbl&gt;, ethnic_cd_P &lt;dbl&gt;, ethnic_cd_W &lt;dbl&gt;, ## # tst_bnch_X2B &lt;dbl&gt;, tst_bnch_X3B &lt;dbl&gt;, tst_bnch_G4 &lt;dbl&gt;, ## # tst_bnch_G6 &lt;dbl&gt;, tst_bnch_G7 &lt;dbl&gt;, migrant_ed_fg_Y &lt;dbl&gt;, ## # ind_ed_fg_Y &lt;dbl&gt;, sp_ed_fg_Y &lt;dbl&gt;, tag_ed_fg_Y &lt;dbl&gt;, ## # econ_dsvntg_Y &lt;dbl&gt;, ayp_lep_B &lt;dbl&gt;, ayp_lep_E &lt;dbl&gt;, ayp_lep_F &lt;dbl&gt;, ## # ayp_lep_M &lt;dbl&gt;, ayp_lep_N &lt;dbl&gt;, ayp_lep_S &lt;dbl&gt;, ayp_lep_W &lt;dbl&gt;, ## # ayp_lep_X &lt;dbl&gt;, ayp_lep_Y &lt;dbl&gt;, stay_in_dist_Y &lt;dbl&gt;, ## # stay_in_schl_Y &lt;dbl&gt;, dist_sped_Y &lt;dbl&gt;, trgt_assist_fg_Y &lt;dbl&gt;, ## # ayp_dist_partic_Y &lt;dbl&gt;, ayp_schl_partic_Y &lt;dbl&gt;, ayp_dist_prfrm_Y &lt;dbl&gt;, ## # ayp_schl_prfrm_Y &lt;dbl&gt;, rc_dist_partic_Y &lt;dbl&gt;, rc_schl_partic_Y &lt;dbl&gt;, ## # rc_dist_prfrm_Y &lt;dbl&gt;, rc_schl_prfrm_Y &lt;dbl&gt;, lang_cd_E &lt;dbl&gt;, ## # tst_atmpt_fg_Y &lt;dbl&gt;, grp_rpt_dist_partic_Y &lt;dbl&gt;, ## # grp_rpt_schl_partic_Y &lt;dbl&gt;, grp_rpt_dist_prfrm_Y &lt;dbl&gt;, ## # grp_rpt_schl_prfrm_Y &lt;dbl&gt; 3.2.1 Order matters It’s important to realize that the order of the steps matters. In our recipe, we first declare ID variables as having a different role than predictors or outcomes, we then modify two variables, remove zero-variance predictors, and finally dummy code all categorical (nominal) variables. What happens if we instead dummy code and then remove zero-variance predictors? rec &lt;- recipe(score ~ ., train) %&gt;% step_dummy(all_nominal()) %&gt;% step_zv(all_predictors()) prep(rec) ## Error: Only one factor level in lang_cd We end up with the error, whereas we don’t if we remove zero variance predictors and then dummy code rec &lt;- recipe(score ~ ., train) %&gt;% step_zv(all_predictors()) %&gt;% step_dummy(all_nominal()) prep(rec) ## Data Recipe ## ## Inputs: ## ## role #variables ## outcome 1 ## predictor 38 ## ## Training data contained 2841 data points and 2841 incomplete rows. ## ## Operations: ## ## Zero variance filter removed calc_admn_cd, lang_cd [trained] ## Dummy variables from gndr, ethnic_cd, tst_bnch, tst_dt, ... [trained] This is true for all steps, and may occasionally lead to you needing to apply the same operation at multiple steps (e.g., a near zero variance filter could be applied before and after dummy-coding). All of the above serves as a basic introduction to developing a recipe, and the what follows goes into more detail on specific feature engineering pieces. For complete documentation on all possible recipe steps, please see the documentaion. "],["encoding-categorical-data.html", "3.3 Encoding categorical data", " 3.3 Encoding categorical data For many (but not all) modeling frameworks, categorical data must be transformed somehow. The most common of these is, as we’ve already seen, dummy coding, which stats::model.matrix will do for you automatically using the stats::contrasts function. There are also other coding schemes you can use with base R, such as Helmert and polynomial coding (see ?contrasts and related functions). Dummy coding leaves one group out (the first level of the factor, by default) and creates new columns for all the other groups coded \\(0\\) or \\(1\\) depending on whether the original variable represented that value or not. For example f &lt;- factor(c(&quot;red&quot;, &quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;green&quot;, &quot;green&quot;)) contrasts(f) ## green red ## blue 0 0 ## green 1 0 ## red 0 1 In the above, \"blue\" has been assigned as the reference category (note that factor levels are assigned in alphabetical order by default), and dummy variables have been created for \"green\" and \"red\". In a linear regression framework, \"blue\" would become the intercept. We can recreate this same coding scheme with {recipes}, but we need to first put it in a data frame. df &lt;- data.frame(f, score = rnorm(length(f))) df ## f score ## 1 red 1.0734291 ## 2 red -0.2675359 ## 3 blue 0.7512238 ## 4 green 0.5436071 ## 5 green 0.6940371 ## 6 green -0.6446104 recipe(score ~ f, data = df) %&gt;% step_dummy(f) %&gt;% prep() %&gt;% bake(new_data = NULL) ## # A tibble: 6 x 3 ## score f_green f_red ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1.073429 0 1 ## 2 -0.2675359 0 1 ## 3 0.7512238 0 0 ## 4 0.5436071 1 0 ## 5 0.6940371 1 0 ## 6 -0.6446104 1 0 In the above, we’ve created the actual columns we need, while in the base example we only created the contrast matrix (although it’s relatively straightforward to then create the columns). The {recipes} version is, admittedly, a fair amount of additional code, but as we saw in the previous section, {recipes} is capable of making a wide range of transformation in a systematic way. 3.3.1 Transformations beyond dummy coding Although less used in inferential statistics, there are a number of additional transformations we can use to encode categorical data. The most straightforward is one-hot encoding. One-hot encoding is essentially equivalent to dummy coding except we create the variables for all levels in the categorical variable (i.e., we do not leave one out as a reference group). This generally makes them less useful in linear regression frameworks (unless the model intercept is dropped), but they can be highly useful in a number of other frameworks, such as tree-based methods (covered later in the book). To use one-hot encoding, we pass the additional one_hot argument to step_dummy. recipe(score ~ f, data = df) %&gt;% step_dummy(f, one_hot = TRUE) %&gt;% prep() %&gt;% bake(new_data = NULL) ## # A tibble: 6 x 4 ## score f_blue f_green f_red ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1.073429 0 0 1 ## 2 -0.2675359 0 0 1 ## 3 0.7512238 1 0 0 ## 4 0.5436071 0 1 0 ## 5 0.6940371 0 1 0 ## 6 -0.6446104 0 1 0 Another relatively common encoding scheme, particularly within natural language processing frameworks, is integer encoding, where each level is associated with a unique integer. For example recipe(score ~ f, data = df) %&gt;% step_integer(f) %&gt;% prep() %&gt;% bake(new_data = NULL) ## # A tibble: 6 x 2 ## f score ## &lt;dbl&gt; &lt;dbl&gt; ## 1 3 1.073429 ## 2 3 -0.2675359 ## 3 1 0.7512238 ## 4 2 0.5436071 ## 5 2 0.6940371 ## 6 2 -0.6446104 Notice that the syntax is essentially equivalent to the previous dummy-coding example, but we’ve just swapped out step_dummy for step_integer. Integer encoding can be useful in natural language processing in particular because words can be encoded as integers, and then the algorithm can search for patterns in the numbers. 3.3.2 Handling new levels One other very common problem with encoding categorical data is how to handle new, unseen levels. For example, if we create a recipe as follows rec &lt;- recipe(score ~ f, data = df) %&gt;% step_dummy(f) we will have no problem creating dummy variables as long as the levels of \\(f\\) are within those contained in df$f (or, more mathematically, where \\(f \\in F\\)). But what if, in a new sample, \\(f =\\) “purple” or \\(f =\\) “gray”? Let’s try and see what happens df2 &lt;- data.frame(f = factor(c(&quot;blue&quot;, &quot;green&quot;, &quot;purple&quot;, &quot;gray&quot;)), score = rnorm(4)) rec %&gt;% prep() %&gt;% bake(new_data = df2) ## # A tibble: 4 x 3 ## score f_green f_red ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1.389833 0 0 ## 2 0.6157117 1 0 ## 3 -2.351945 NA NA ## 4 -0.1654947 NA NA We end up propagating missing data, which is obviously less than ideal. Luckily, the solution is pretty straightforward. We just add a new step to our recipe to handle novel (or new) categories, lumping them all in their own level. rec &lt;- recipe(score ~ f, data = df) %&gt;% step_novel(f) %&gt;% step_dummy(f) rec %&gt;% prep() %&gt;% bake(new_data = df2) ## # A tibble: 4 x 4 ## score f_green f_red f_new ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1.389833 0 0 0 ## 2 0.6157117 1 0 0 ## 3 -2.351945 0 0 1 ## 4 -0.1654947 0 0 1 This is not perfect, because \"purple\" and \"orange\" may be highly different, and we’re modeling them as a single category. But at least we’re able to move forward with our model without introducing new missing data. As an aside, this is a small example of why having good training data is so important. If you don’t have all the levels of a categorical variable represented, you may end up essentially collapsing levels when there is meaningful variance that could be parsed out. You can also use a similar approach with step_other if you have a categorical variable with lots of levels (and a small-ish \\(n\\) by comparison). Using step_other, you specify a threshold below which levels should be collapsed into a single “other” category. The threshold can be passed as a proportion or a frequency. 3.3.3 Final thoughts on encoding categorical data There are, of course, many other ways you can encode categorical data. One important consideration is whether or not the variable is ordered (e.g., low, medium, high) in which case it may make sense to have a corresponding ordered numeric variable (e.g., \\(0\\), \\(1\\), \\(2\\)). Of course, the method of coding these ordered values will relate to assumptions of your modeling process (in the previous example, that there is a linear, constant change across categories). In our experience, however, the combination of dummy coding (with potentially a one-hot alternative used), integer coding, or simply leaving the categorical variables as they are (for specific frameworks, like tree-based methods) is sufficient most (but not all) of the time. For a more complete discussion of encoding categorical data for predictive modeling frameworks, we recommend Chapter 5 of Kuhn &amp; Johnson (2019). "],["dealing-with-low-variance-predictors.html", "3.4 Dealing with low variance predictors", " 3.4 Dealing with low variance predictors Occasionally you have (or can create) variables that are highly imbalanced. A common example might include a gender variable that takes on the values “male”, “female”, “non-binary”, “other”, and “refused to answer”. Once you dummy-code a variable like this, it is possible that one or more of the categories may be so infrequent that it makes modeling that category difficult. This is not to say that these categories are not important, particularly when considering the representation of your training dataset to real-world applications (and any demographic variable is going to be associated with issues of ethics). Ignoring this variation may lead to systematic biases in model predictions. However, you also regularly have to make compromises to get models to work and be useful. One of those compromises often includes (with many types of variables, not just demographics) dropping highly imbalanced predictors. Let’s look back at our statewide testing data. Let’s bake the final recipe from our Creating a recipe section on the training data (that we fed to the recipe) and look at the dummy variables that are created. rec &lt;- recipe(score ~ ., train) %&gt;% update_role(contains(&quot;id&quot;), ncessch, new_role = &quot;id vars&quot;) %&gt;% step_mutate(lang_cd = factor(ifelse(is.na(lang_cd), &quot;E&quot;, lang_cd)), tst_dt = lubridate::mdy_hms(tst_dt)) %&gt;% step_zv(all_predictors()) %&gt;% step_dummy(all_nominal()) baked &lt;- rec %&gt;% prep() %&gt;% bake(new_data = NULL) Below is a table of just the categorical variables and the frequency of each value. The relative frequency of many of these looks fine, but for some one category has very low frequency. For example, ayp_lep_M has 576 observations (from our random 2% sample) that were \\(0\\), and only 2 that were \\(1\\). This is the same for ayp_lep_S. We may therefore consider applying a near-zero variance filter to drop these columns. Let’s try this, and then we’ll talk a bit more about what the filter is actually doing. rec_nzv &lt;- rec %&gt;% step_nzv(all_predictors()) baked_rm_nzv &lt;- rec_nzv %&gt;% prep() %&gt;% bake(new_data = NULL) Let’s look at what columns are in baked that were removed from baked_rm_nzv. removed_columns &lt;- names(baked)[!(names(baked) %in% names(baked_rm_nzv))] removed_columns ## [1] &quot;ethnic_cd_B&quot; &quot;ethnic_cd_I&quot; &quot;ethnic_cd_P&quot; ## [4] &quot;migrant_ed_fg_Y&quot; &quot;ind_ed_fg_Y&quot; &quot;ayp_lep_B&quot; ## [7] &quot;ayp_lep_M&quot; &quot;ayp_lep_S&quot; &quot;ayp_lep_W&quot; ## [10] &quot;stay_in_dist_Y&quot; &quot;stay_in_schl_Y&quot; &quot;dist_sped_Y&quot; ## [13] &quot;trgt_assist_fg_Y&quot; &quot;ayp_dist_partic_Y&quot; &quot;ayp_schl_partic_Y&quot; ## [16] &quot;ayp_dist_prfrm_Y&quot; &quot;ayp_schl_prfrm_Y&quot; &quot;rc_dist_partic_Y&quot; ## [19] &quot;rc_schl_partic_Y&quot; &quot;rc_dist_prfrm_Y&quot; &quot;rc_schl_prfrm_Y&quot; ## [22] &quot;lang_cd_E&quot; &quot;tst_atmpt_fg_Y&quot; &quot;grp_rpt_dist_partic_Y&quot; ## [25] &quot;grp_rpt_schl_partic_Y&quot; &quot;grp_rpt_dist_prfrm_Y&quot; &quot;grp_rpt_schl_prfrm_Y&quot; As you can see, the near-zero variance filter has been quite aggressive here, removing 27 columns. Looking back at our table of variables, we can see that, for example, there are 55 students coded Black out of 2841, and it could be reasonably argued that this column is worth keeping in the model. So how is step_nzv working and how can we adjust it to be not quite so aggressive? Variables are flagged for being near-zero variance if they Have very few unique values, and The frequency ratio for the most common value to the second most common value is large These criteria are implemented in step_nzv through the unique_cut and freq_cut arguments, respectively. The former is estimated as the number of unique values divided by the total number of samples (length of the column) times 100 (i.e., it is a percent), while the latter is estimated by the most common level frequency divided by the second most common level frequency. The default for unique_cut is 10, while the default for freq_cut is \\(95/5 = 19\\). For a column to be “caught” by a near-zero variance filter, and removed from the training set, it must be below the specified unique_cut and above the specified freq_cut. In the case of ethnic_cd_B, we see that there are two unique values, \\(0\\) and \\(1\\) (because it’s a dummy-coded variable). There are 2841 rows, so the unique_cut value is \\((2 / 2841) \\times 100 = 0.07\\). The frequency ratio is \\(2786/55 = 50.65\\). It therefore meets both of the default criteria (below unique_cut and above freq_cut) and is removed. If you’re applying a near-zero variance filter on dummy variables, there will always be only 2 values, leading to a small unique_cut. This might encourage you to up the freq_cut to a higher value. Let’s try this approach rec_nzv2 &lt;- rec %&gt;% step_nzv(all_predictors(), freq_cut = 99/1) baked_rm_nzv2 &lt;- rec_nzv2 %&gt;% prep() %&gt;% bake(new_data = NULL) removed_columns2 &lt;- names(baked)[!(names(baked) %in% names(baked_rm_nzv2))] removed_columns2 ## [1] &quot;ethnic_cd_P&quot; &quot;ayp_lep_M&quot; &quot;ayp_lep_S&quot; ## [4] &quot;ayp_lep_W&quot; &quot;dist_sped_Y&quot; &quot;ayp_dist_partic_Y&quot; ## [7] &quot;ayp_schl_partic_Y&quot; &quot;rc_dist_partic_Y&quot; &quot;rc_schl_partic_Y&quot; ## [10] &quot;tst_atmpt_fg_Y&quot; &quot;grp_rpt_dist_partic_Y&quot; &quot;grp_rpt_schl_partic_Y&quot; ## [13] &quot;grp_rpt_dist_prfrm_Y&quot; Removing near-zero variance dummy variables can be a bit tricky because they will essentially always meet the unique_cut criteria. But it can be achieved by fiddling with the freq_cut variable and, actually, could be considered part of your model tuning process. In this case, we’ve set it so variables will be removed if greater than 99 out of every 100 cases is the same. This led to only 13 variables being flagged and removed. But we could continue on even further specifying, for example, that 499 out of every 500 must be the same for the variable to be flagged. At some point, however, you’ll end up with variables that have such low frequency that model estimation becomes difficult, which is the purpose of applying the near-zero variance filter in the first place. "],["missing-data.html", "3.5 Missing data", " 3.5 Missing data If we look closely at our statewide testing data, we will see that there is a considerable amount of missingness. In fact, every row of the data frame has at least one value that is missing. The amount to which missing data impacts your work varies by field, but in most fields you’re likely to run into situations where you have to handle missing data in some way. The purpose of this section is to discuss a few approaches (as implemented through the {recipes} package) to handling missingness for predictive modeling purposes. Note that this is not a comprehensive discussion on the topic (for which, we recommend Little and Rubin (2002)), but is instead an applied discussion of what you can do. As with many aspects of data analysis, generally, there is no single approach that will always work best, and it’s worth trying a few different approaches in your model development to see how different choices impact your model performance. There are three basic ways of handling missing data: Omit rows of the data frame that include missing values Encode or Impute the missing data Ignore the missing data and estimate from the available data The last option is not always feasible and will depend the modeling framework you’re working within. Some estimation procedures can also lend themselves to efficient handling of missing data (for example, imputation via the posterior distribution with Bayesian estimation). In this section, we’ll mostly focus on the first three. Additionally, we will only really be concerned with missingness on the predictor variables here, rather than the outcome. Generally, missing data on the predictors is a much more difficult problem than missingness on the outcome, because most models assume you have complete data across your predictors. 3.5.1 Missing data via {recipes} 3.5.1.1 Omission We can omit missing data with step_naomit. This will remove any row that has any missing data. Let’s see how this impacts our data, working with our same recipe we finished up with in the Creating a recipe section. I’ve placed the recipe here again so we don’t have to go back to remind ourselves what we did previously. rec &lt;- recipe(score ~ ., train) %&gt;% update_role(contains(&quot;id&quot;), ncessch, new_role = &quot;id vars&quot;) %&gt;% step_mutate(lang_cd = factor(ifelse(is.na(lang_cd), &quot;E&quot;, lang_cd)), tst_dt = lubridate::mdy_hms(tst_dt)) %&gt;% step_zv(all_predictors()) na_omit_data &lt;- rec %&gt;% step_naomit(all_predictors()) %&gt;% step_dummy(all_nominal()) %&gt;% prep() %&gt;% bake(new_data = NULL) nrow(na_omit_data) ## [1] 573 As can be seen above, when we omit any row with missing data we end up with only 573 rows out of the original 2841 rows in the training data (or approximately 20% of the original data). This level of data omission is highly likely to introduce systematic biases into your model prediction. Generally, step_naomit should only be used when developing preliminary models, where you’re just trying to get code to run. When you get to the point where you’re actually trying to improve performance, you should consider alternative means 3.5.1.2 Encoding and simple imputation Encoding missing data is similar to imputation. In imputation, we replace the missing value with something we thing could have reasonably been the real value, if it were observed. When we encode missing data we are creating values that will be included in the modeling process. For example, with categorical variables, we could replace the missingess with a “missing” level, which would then get its own dummy code (if we were using dummy coding to encode the categorical variables). I mentioned in the Creating a recipe section that we were getting warnings but I was omitting them in the text. The reason is because some of these columns have missing data. If we want to avoid this warning, we have to add an additional step to our recipe to encode the missing data in the categorical variables. This step is called step_unknown and it replaces missing values with \"unknown\". Let’s do this for all categorical variables, and omit any rows that are missing on numeric columns. na_encode_data &lt;- rec %&gt;% step_unknown(all_nominal()) %&gt;% step_naomit(all_predictors()) %&gt;% step_dummy(all_nominal()) %&gt;% prep() %&gt;% bake(new_data = NULL) nrow(na_encode_data) ## [1] 2788 Notice in the above that when I call step_naomit I state that it should be applied to all_predictors because I’ve already encoded the nominal predictors in the previous step. This approach allows us to capture 98% of the original data. And as a bonus, we’ve removed ourselves of the warnings (note - we might also want to apply step_novel for any future data that had levels outside of our training data - see Handling new levels). Just a slight step up in complexity from omission of rows with missing data is to impute them with sample descriptive statistics, such as the mean or the median. Generally, I’ve found median imputation works better than mean imputation, but that could be related to the types of data I work with most frequently. Let’s switch datasets so we can see what’s happening more directly. Let’s look at the airquality dataset, which ships with R. head(airquality) ## Ozone Solar.R Wind Temp Month Day ## 1 41 190 7.4 67 5 1 ## 2 36 118 8.0 72 5 2 ## 3 12 149 12.6 74 5 3 ## 4 18 313 11.5 62 5 4 ## 5 NA NA 14.3 56 5 5 ## 6 28 NA 14.9 66 5 6 As we can see, Solar.R is missing for observations 5 and 6. Let’s compute the sample mean and median for this column. mean(airquality$Solar.R, na.rm = TRUE) ## [1] 185.9315 median(airquality$Solar.R, na.rm = TRUE) ## [1] 205 If we use mean or median imputation, we just replace the missing values with these sample statistics. Let’s do this with {recipes}, assuming we’ll be fitting a model where Ozone is the outcome, predicted by all other variables in the dataset. recipe(Ozone ~ ., data = airquality) %&gt;% step_meanimpute(all_predictors()) %&gt;% prep() %&gt;% bake(new_data = NULL) ## # A tibble: 153 x 6 ## Solar.R Wind Temp Month Day Ozone ## &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 190 7.4 67 5 1 41 ## 2 118 8 72 5 2 36 ## 3 149 12.6 74 5 3 12 ## 4 313 11.5 62 5 4 18 ## 5 186 14.3 56 5 5 NA ## 6 186 14.9 66 5 6 28 ## 7 299 8.6 65 5 7 23 ## 8 99 13.8 59 5 8 19 ## 9 19 20.1 61 5 9 8 ## 10 194 8.6 69 5 10 NA ## # … with 143 more rows As we can see, the value \\(186\\) has been imputed for rows 5 and 6, which is the integer version of the sample mean (an integer was imputed because the column was already an integer, and not a double). Let’s try the same thing with median imputation recipe(Ozone ~ ., data = airquality) %&gt;% step_medianimpute(all_predictors()) %&gt;% prep() %&gt;% bake(new_data = NULL) ## # A tibble: 153 x 6 ## Solar.R Wind Temp Month Day Ozone ## &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 190 7.4 67 5 1 41 ## 2 118 8 72 5 2 36 ## 3 149 12.6 74 5 3 12 ## 4 313 11.5 62 5 4 18 ## 5 205 14.3 56 5 5 NA ## 6 205 14.9 66 5 6 28 ## 7 299 8.6 65 5 7 23 ## 8 99 13.8 59 5 8 19 ## 9 19 20.1 61 5 9 8 ## 10 194 8.6 69 5 10 NA ## # … with 143 more rows And as we would expect, the missingness has now been replaced with values of \\(205\\). Sometimes you have time series data, or there is a date variable in the dataset that accounts for a meaningful proportion of the variance. In these cases, you might consider step_rollimpute, which provides a conditional median imputation based on time, and you can set the size of the window from which to calculate the median. In still other cases it may make sense to just impute with the lowest observed value (i.e., assume a very small amount of the predictor), which can be accomplished with step_lowerimpute. These simple imputation techniques are fine to use when developing models. However, it’s an area that may be worth returning to as you start to refine your model to see if you can improve performance. 3.5.1.3 Modeling the missingness Another alternative for imputation is to fit a statistical model with the column you want to impute modeled as the outcome, with all other columns (minus the actual outcome) predicting it. We then use that model for the imputation. Let’s first consider a linear regression model. We’ll fit the same model we specified in our recipe, using the airquality data. m &lt;- lm(Solar.R ~ ., data = airquality[ ,-1]) summary(m) ## ## Call: ## lm(formula = Solar.R ~ ., data = airquality[, -1]) ## ## Residuals: ## Min 1Q Median 3Q Max ## -182.945 -67.348 5.295 73.781 170.068 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -14.5960 84.4424 -0.173 0.863016 ## Wind 2.1661 2.2633 0.957 0.340171 ## Temp 3.7023 0.9276 3.991 0.000105 *** ## Month -13.2640 5.4525 -2.433 0.016242 * ## Day -1.0631 0.8125 -1.308 0.192875 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 85.14 on 141 degrees of freedom ## (7 observations deleted due to missingness) ## Multiple R-squared: 0.131, Adjusted R-squared: 0.1063 ## F-statistic: 5.313 on 4 and 141 DF, p-value: 0.0005145 Notice that I’ve dropped the first column here, which is Ozone, our actual outcome. The model above has been fit using the equivalent of step_naomit, otherwise known as listwise deletion, where any row with any missing data is removed. We can now use the coefficients from this model to impute the missing values in Solar.R. For example, row 6 in the dataset had a missing value on Solar.R and following values for all other variables row6 &lt;- data.frame(Wind = 14.9, Temp = 66, Month = 5, Day = 6) Using our model, we would predict the following score for this missing value predict(m, newdata = row6) ## 1 ## 189.3325 Let’s try this using {recipes}. recipe(Ozone ~ ., data = airquality) %&gt;% step_impute_linear(all_predictors()) %&gt;% prep() %&gt;% bake(new_data = NULL) ## # A tibble: 153 x 6 ## Solar.R Wind Temp Month Day Ozone ## &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 190 7.4 67 5 1 41 ## 2 118 8 72 5 2 36 ## 3 149 12.6 74 5 3 12 ## 4 313 11.5 62 5 4 18 ## 5 152 14.3 56 5 5 NA ## 6 189 14.9 66 5 6 28 ## 7 299 8.6 65 5 7 23 ## 8 99 13.8 59 5 8 19 ## 9 19 20.1 61 5 9 8 ## 10 194 8.6 69 5 10 NA ## # … with 143 more rows And we see two important things here. First, row 6 for Solar.R is indeed as we expected it to be (albeit, in integer form). Second, the imputed values for rows 5 and 6 are now different, which is the first time we’ve seen this via imputation. The same basic approach can be used for essentially any statistical model. The {recipes} package has currently implemented linear imputation (as above), \\(k\\)-nearest neighbor imputation, and bagged imputation (via bagged trees). Let’s see how rows 5 and 6 differ with these approaches. recipe(Ozone ~ ., data = airquality) %&gt;% step_knnimpute(all_predictors()) %&gt;% prep() %&gt;% bake(new_data = NULL) ## # A tibble: 153 x 6 ## Solar.R Wind Temp Month Day Ozone ## &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 190 7.4 67 5 1 41 ## 2 118 8 72 5 2 36 ## 3 149 12.6 74 5 3 12 ## 4 313 11.5 62 5 4 18 ## 5 159 14.3 56 5 5 NA ## 6 220 14.9 66 5 6 28 ## 7 299 8.6 65 5 7 23 ## 8 99 13.8 59 5 8 19 ## 9 19 20.1 61 5 9 8 ## 10 194 8.6 69 5 10 NA ## # … with 143 more rows recipe(Ozone ~ ., data = airquality) %&gt;% step_bagimpute(all_predictors()) %&gt;% prep() %&gt;% bake(new_data = NULL) ## # A tibble: 153 x 6 ## Solar.R Wind Temp Month Day Ozone ## &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 190 7.4 67 5 1 41 ## 2 118 8 72 5 2 36 ## 3 149 12.6 74 5 3 12 ## 4 313 11.5 62 5 4 18 ## 5 99 14.3 56 5 5 NA ## 6 252 14.9 66 5 6 28 ## 7 299 8.6 65 5 7 23 ## 8 99 13.8 59 5 8 19 ## 9 19 20.1 61 5 9 8 ## 10 194 8.6 69 5 10 NA ## # … with 143 more rows These models are quite a bit more flexible than linear regression, and can potentially overfit. You can, however, control some of the parameters to the models through additional arguments (e.g., \\(k\\) for \\(knn\\), which defaults to 5). The benefit of these models is that they may provide better estimates of what the imputed value would have been, were it not missing, which may then improve model performance. The downside is that they are quite a bit more computationally intensive. Generally, you use recipes within processes like \\(k\\)-fold cross-validation, with the recipe being applied to each fold. In this case, a computationally expensive approach may significantly bog down hyperparameter tuning. 3.5.2 A few words of caution Missing data is a highly complex topic. This section was meant to provide a basic overview of some of the options you can choose from when building a predictive model. None of these approaches, however, will “fix” data that are missing not at random (MNAR). Unfortunately, it is usually impossible to know if your data are MNAR, and we therefore assume that that are MAR, or missing at random conditional on the observed data. For example, if boys were more likely to have missing data on the outcome than girls, we could account for this by including a gender variable in the model, and the resulting data would be MAR. If you have significant missing data, this section is surely incomplete. We recommended Little and Rubin (2002) previously, and there are a number of other good resources, including a chapter in Kuhn and Johnson (2019). "],["transformations.html", "3.6 Transformations", " 3.6 Transformations "],["nonlinearity.html", "3.7 Nonlinearity", " 3.7 Nonlinearity "],["pca.html", "3.8 PCA", " 3.8 PCA "],["wrapping-up.html", "3.9 Wrapping up", " 3.9 Wrapping up "]]
